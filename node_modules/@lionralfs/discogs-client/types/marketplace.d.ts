import { type DiscogsClient } from './client.js';
import { type RateLimitedResponse, type SortParameters, type Currency, type PaginationParameters, type PaginationResponse, type Price, type Listing, type SaleStatus } from './types.js';
export type Condition = 'Mint (M)' | 'Near Mint (NM or M-)' | 'Very Good Plus (VG+)' | 'Very Good (VG)' | 'Good Plus (G+)' | 'Good (G)' | 'Fair (F)' | 'Poor (P)';
export type SleeveCondition = Condition | 'Generic' | 'Not Graded' | 'No Cover';
export type OrderStatus = 'New Order' | 'Buyer Contacted' | 'Invoice Sent' | 'Payment Pending' | 'Payment Received' | 'Shipped' | 'Refund Sent' | 'Cancelled (Non-Paying Buyer)' | 'Cancelled (Item Unavailable)' | "Cancelled (Per Buyer's Request)";
export type Order = {
    resource_url: string;
    id: number;
};
export type OrderMessage = {
    timestamp: string;
    message: string;
    type: string;
    order: Order;
    subject: string;
    refund?: {
        amount: number;
        order: Order;
    };
    from?: {
        id: number;
        username: string;
        avatar_url: string;
        resource_url: string;
    };
    status_id?: number;
    actor?: {
        username: string;
        resource_url: string;
    };
    original?: number;
    new?: number;
};
export type AddListingResponse = {
    listing_id: number;
    resource_url: string;
};
export type GetOrderResponse = {
    id: number;
    resource_url: string;
    messages_url: string;
    uri: string;
    status: OrderStatus;
    next_status: Array<OrderStatus>;
    fee: Price;
    created: string;
    items: Array<{
        release: {
            id: number;
            description: string;
        };
        price: Price;
        media_condition: Condition;
        sleeve_condition: SleeveCondition;
        id: number;
    }>;
    shipping: {
        currency: Currency;
        method: string;
        value: number;
    };
    shipping_address: string;
    additional_instructions: string;
    archived: boolean;
    seller: {
        resource_url: string;
        username: string;
        id: number;
    };
    last_activity: string;
    buyer: {
        resource_url: string;
        username: string;
        id: number;
    };
    total: Price;
};
export type GetReleaseStatsResponseMarketplace = {
    lowest_price?: Price;
    num_for_sale?: number;
    blocked_from_sale: boolean;
};
/**
 * @param {DiscogsClient} client
 */
export default function (client: DiscogsClient): {
    /**
     * Copy the getInventory function from the user module
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-inventory-get
     */
    getInventory: (user: string, params?: Partial<{
        status: string;
    }> & PaginationParameters & SortParameters<"listed" | "price" | "item" | "artist" | "label" | "catno" | "audio" | "status" | "location">) => Promise<RateLimitedResponse<import("./user.js").GetInventoryResponse & PaginationResponse>>;
    /**
     * Get a marketplace listing
     * @param {number} listing - The listing ID
     * @param {Currency} [currency] - Optional currency
     * @returns {Promise<RateLimitedResponse<Listing>>}
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-listing-get
     *
     * @example
     * await client.marketplace().getListing(172723812, 'USD');
     */
    getListing: (listing: number, currency?: Currency) => Promise<RateLimitedResponse<Listing>>;
    /**
     * Create a marketplace listing
     * @param {{release_id: number; condition: Condition; price: number; status: SaleStatus;} & Partial<{sleeve_condition: SleeveCondition; comments: string; allow_offers: boolean; external_id: string; location: string; weight: number | 'auto'; format_quantity: number | 'auto'}>} data - The data for the listing
     * @returns {Promise<RateLimitedResponse<AddListingResponse>>}
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-new-listing-post
     *
     * @example
     * await client.marketplace().addListing({
     *     release_id: 1,
     *     condition: 'Mint (M)',
     *     sleeve_condition: 'Fair (F)',
     *     price: 10,
     *     comments: 'This item is wonderful',
     *     allow_offers: true,
     *     status: 'Draft',
     *     external_id: '1234321',
     *     location: 'top shelf',
     *     weight: 200,
     *     format_quantity: 'auto',
     * });
     */
    addListing: (data: {
        release_id: number;
        condition: Condition;
        price: number;
        status: SaleStatus;
    } & Partial<{
        sleeve_condition: SleeveCondition;
        comments: string;
        allow_offers: boolean;
        external_id: string;
        location: string;
        weight: number | "auto";
        format_quantity: number | "auto";
    }>) => Promise<RateLimitedResponse<AddListingResponse>>;
    /**
     * Edit a marketplace listing
     * @param {number} listing - The listing ID
     * @param {{release_id: number; condition: Condition; price: number; status: SaleStatus} & Partial<{sleeve_condition: SleeveCondition; comments: string; allow_offers: boolean; external_id: string; location: string; weight: number | 'auto'; format_quantity: number | 'auto'}>} data - The data for the listing
     * @returns {Promise<RateLimitedResponse<void>>}
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-listing-post
     *
     * @example
     * await client.marketplace().editListing(172723812, {
     *     release_id: 1,
     *     condition: 'Mint (M)',
     *     sleeve_condition: 'Fair (F)',
     *     price: 10,
     *     comments: 'This item is wonderful',
     *     allow_offers: true,
     *     status: 'Draft',
     *     external_id: '1234321',
     *     location: 'top shelf',
     *     weight: 200,
     *     format_quantity: 'auto',
     * });
     */
    editListing: (listing: number, data: {
        release_id: number;
        condition: Condition;
        price: number;
        status: SaleStatus;
    } & Partial<{
        sleeve_condition: SleeveCondition;
        comments: string;
        allow_offers: boolean;
        external_id: string;
        location: string;
        weight: number | "auto";
        format_quantity: number | "auto";
    }>) => Promise<RateLimitedResponse<void>>;
    /**
     * Delete a marketplace listing
     * @param {number} listing - The listing ID
     * @returns {Promise<RateLimitedResponse<void>>}
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-listing-delete
     *
     * @example
     * await client.marketplace().deleteListing(172723812);
     */
    deleteListing: (listing: number) => Promise<RateLimitedResponse<void>>;
    /**
     * Get a list of the authenticated user's orders
     * @param {Partial<{status: OrderStatus; created_after: string; created_before: string; archived: boolean}> & PaginationParameters & SortParameters<'id' | 'buyer' | 'created' | 'status' | 'last_activity'>} [params] - Optional sorting and pagination params
     * @returns {Promise<RateLimitedResponse<PaginationResponse & {orders: Array<GetOrderResponse>}>>}
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-list-orders-get
     *
     * @example
     * await client.marketplace().getOrders({
     *     status: "Cancelled (Per Buyer's Request)",
     *     created_after: '2019-06-24T20:58:58Z',
     *     created_before: '2019-06-25T20:58:58Z',
     *     archived: true,
     *     sort: 'last_activity',
     *     sort_order: 'desc',
     *     page: 2,
     *     per_page: 50,
     * });
     */
    getOrders: (params?: Partial<{
        status: OrderStatus;
        created_after: string;
        created_before: string;
        archived: boolean;
    }> & PaginationParameters & SortParameters<"id" | "buyer" | "created" | "status" | "last_activity">) => Promise<RateLimitedResponse<PaginationResponse & {
        orders: Array<GetOrderResponse>;
    }>>;
    /**
     * Get details of a marketplace order
     * @param {number} order - The order ID
     * @returns {Promise<RateLimitedResponse<GetOrderResponse>>}
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-order-get
     *
     * @example
     * await client.marketplace().getOrder(1);
     */
    getOrder: (order: number) => Promise<RateLimitedResponse<GetOrderResponse>>;
    /**
     * Edit a marketplace order
     * @param {number} order - The order ID
     * @param {Partial<{status: OrderStatus; shipping: number}>} data - The data for the order
     * @returns {Promise<RateLimitedResponse<GetOrderResponse>>}
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-order-post
     *
     * @example
     * await client.marketplace().editOrder(1, { status: 'Shipped', shipping: 10 });
     */
    editOrder: (order: number, data: Partial<{
        status: OrderStatus;
        shipping: number;
    }>) => Promise<RateLimitedResponse<GetOrderResponse>>;
    /**
     * List the messages for the given order ID
     * @param {number} order - The order ID
     * @param {PaginationParameters} [params] - Optional pagination parameters
     * @returns {Promise<RateLimitedResponse<PaginationResponse & {messages: Array<OrderMessage>}>>}
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-list-order-messages-get
     *
     * @example
     * await client.marketplace().getOrderMessages(1, { page: 2, per_page: 50 });
     */
    getOrderMessages: (order: number, params?: PaginationParameters) => Promise<RateLimitedResponse<PaginationResponse & {
        messages: Array<OrderMessage>;
    }>>;
    /**
     * Add a message to the given order ID
     * @param {number} order - The order ID
     * @param {Partial<{message: string; status: OrderStatus}>} data - The message data
     * @returns {Promise<RateLimitedResponse<OrderMessage>>}
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-list-order-messages-post
     *
     * @example
     * await client.marketplace().addOrderMessage(1, { message: 'hello world', status: 'New Order' });
     */
    addOrderMessage: (order: number, data: Partial<{
        message: string;
        status: OrderStatus;
    }>) => Promise<RateLimitedResponse<OrderMessage>>;
    /**
     * Get the marketplace fee for a given price
     * @param {number} price - The price as a number
     * @param {Currency} [currency] - Optional currency as one of USD, GBP, EUR, CAD, AUD, or JPY. Defaults to USD.
     * @returns {Promise<RateLimitedResponse<Price>>}
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-fee-get
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-fee-with-currency-get
     *
     * @example
     * await client.marketplace().getFee(10);
     * await client.marketplace().getFee(10, 'EUR');
     */
    getFee: (price: number, currency?: Currency) => Promise<RateLimitedResponse<Price>>;
    /**
     * Get price suggestions for a given release ID in the user's selling currency
     * @param {number} release - The release ID
     * @returns {Promise<RateLimitedResponse<Record<Condition, Price>>>}
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-price-suggestions-get
     *
     * @example
     * await client.marketplace().getPriceSuggestions(10);
     */
    getPriceSuggestions: (release: number) => Promise<RateLimitedResponse<Record<Condition, Price>>>;
    /**
     * Retrieve marketplace statistics for the provided Release ID.
     * These statistics reflect the state of the release in the marketplace currently,
     * and include the number of items currently for sale, lowest listed price of any item for sale,
     * and whether the item is blocked for sale in the marketplace.
     * @param {number} release
     * @param {Currency} [currency]
     * @returns {Promise<RateLimitedResponse<GetReleaseStatsResponseMarketplace>>}
     *
     * @see https://www.discogs.com/developers/#page:marketplace,header:marketplace-release-statistics-get
     *
     * @example
     * await client.marketplace().getReleaseStats(1, 'EUR');
     */
    getReleaseStats: (release: number, currency?: Currency) => Promise<RateLimitedResponse<GetReleaseStatsResponseMarketplace>>;
};
