import database from './database.js';
import marketplace from './marketplace.js';
import inventory from './inventory.js';
import user from './user.js';
import { type Auth, type GetIdentityResponse, type RateLimit, type RateLimitedResponse, type RequestOptions, type ClientConfig, type AboutResponse } from './types.js';
export declare class DiscogsClient {
    private config;
    private auth;
    /**
     * @param {Partial<{userAgent: string; auth: Partial<Auth>}>} [options]
     */
    constructor(options?: Partial<{
        userAgent: string;
        auth: Partial<Auth>;
    }>);
    /**
     * Override the default configuration
     * @param {Partial<ClientConfig>} customConfig - Custom configuration object
     * @returns {DiscogsClient}
     */
    setConfig(customConfig: Partial<ClientConfig>): DiscogsClient;
    /**
     * Return whether the client is authenticated for the optionally given access level
     * @param {number} [level] - Optional authentication level
     * @returns {boolean}
     */
    authenticated(level?: number): boolean;
    /**
     * Test authentication by getting the identity resource for the authenticated user
     * @returns {Promise<RateLimitedResponse<GetIdentityResponse>>}
     *
     * @see https://www.discogs.com/developers/#page:user-identity,header:user-identity-identity-get
     *
     * @example
     * await client.user().getIdentity();
     */
    getIdentity: () => Promise<RateLimitedResponse<GetIdentityResponse>>;
    /**
     * Get info about the Discogs API and this client
     *
     * @returns {Promise<RateLimitedResponse<AboutResponse>>}
     */
    about(): Promise<RateLimitedResponse<AboutResponse>>;
    /**
     * Send a raw request
     * @param {RequestOptions} options - Request options
     * {
     *		url: '', // May be a relative path when accessing the discogs API
     *		method: '', // Defaults to GET
     *		data: {} // POST/PUT data as an object
     * }
     * @param {RequestCallback} callback - Callback function receiving the data
     * @param {number} failedAttempts The amounts of times this request has been attempted but failed
     */
    private rawRequest;
    /**
     * Send a request and parse text response to JSON
     * @param {RequestOptions} options - Request options
     * @returns {Promise<{data: unknown; rateLimit?: RateLimit}>}
     */
    request(options: RequestOptions): Promise<{
        data: unknown;
        rateLimit?: RateLimit;
    }>;
    /**
     * Perform a GET request against the Discogs API
     *
     * @param {string | RequestOptions} options - Request options object or an url
     */
    get(options: string | RequestOptions): Promise<{
        data: unknown;
        rateLimit?: RateLimit;
    }>;
    /**
     * Perform a POST request against the Discogs API
     * @param {string | RequestOptions} options - Request options object or an url
     * @param {RequestOptions['data']} data - POST data
     * @returns {Promise<unknown>}
     */
    post(options: string | RequestOptions, data: RequestOptions['data']): Promise<unknown>;
    /**
     * Perform a PUT request against the Discogs API
     * @param {string | RequestOptions} options - Request options object or an url
     * @param {RequestOptions['data']} data - PUT data
     * @returns {Promise<unknown>}
     */
    put(options: string | RequestOptions, data: RequestOptions['data']): Promise<unknown>;
    /**
     * Perform a DELETE request against the Discogs API
     * @param {string | RequestOptions} options - Request options object or an url
     * @returns {Promise<unknown>}
     */
    delete(options: string | RequestOptions): Promise<unknown>;
    /**
     * Expose the database functions and pass the current instance
     * @returns {ReturnType<typeof database>}
     */
    database(): ReturnType<typeof database>;
    /**
     * Expose the marketplace functions and pass the current instance
     * @returns {ReturnType<typeof marketplace>}
     */
    marketplace(): ReturnType<typeof marketplace>;
    /**
     * Exposes the interface to interact with one's inventory (import/export)
     * @returns {ReturnType<inventory>}
     */
    inventory(): ReturnType<typeof inventory>;
    /**
     * Expose the user functions and pass the current instance
     * @returns {ReturnType<typeof user>}
     */
    user(): ReturnType<typeof user>;
}
